# Generated by Django 5.2.1 on 2025-05-13 11:00

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('roomId', models.AutoField(primary_key=True, serialize=False)),
                ('roomName', models.CharField(max_length=255)),
                ('capacity', models.IntegerField()),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Комната',
                'verbose_name_plural': 'Комнаты',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userId', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('fullName', models.CharField(max_length=255)),
                ('firstName', models.CharField(max_length=150)),
                ('lastName', models.CharField(max_length=150)),
                ('phoneNumber', models.CharField(blank=True, max_length=20, null=True)),
                ('preferredMode', models.CharField(blank=True, choices=[('PERSONAL', 'Личный'), ('CORPORATE', 'Корпоративный'), ('BOTH', 'Оба раздела')], max_length=10, null=True)),
                ('createdAt', models.DateTimeField(default=django.utils.timezone.now)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('companyId', models.AutoField(primary_key=True, serialize=False)),
                ('companyName', models.CharField(max_length=255)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('director', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='directed_company', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Компания',
                'verbose_name_plural': 'Компании',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='taskon.company'),
        ),
        migrations.CreateModel(
            name='CompanyRole',
            fields=[
                ('roleId', models.AutoField(primary_key=True, serialize=False)),
                ('roleName', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_roles', to='taskon.company')),
            ],
            options={
                'verbose_name': 'Роль в компании',
                'verbose_name_plural': 'Роли в компании',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='companyRoles',
            field=models.ManyToManyField(related_name='users', to='taskon.companyrole'),
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('departmentId', models.AutoField(primary_key=True, serialize=False)),
                ('departmentName', models.CharField(max_length=255)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='taskon.company')),
                ('manager', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_department', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Отдел',
                'verbose_name_plural': 'Отделы',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='taskon.department'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('eventId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('startTime', models.DateTimeField()),
                ('endTime', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('PLANNED', 'Запланировано'), ('COMPLETED', 'Завершено'), ('CANCELLED', 'Отменено')], default='PLANNED', max_length=20)),
                ('createdBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='participatingEvents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
            },
        ),
        migrations.CreateModel(
            name='MeetingTemplate',
            fields=[
                ('templateId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('duration', models.IntegerField(help_text='Длительность встречи в минутах')),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('isActive', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meeting_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Шаблон встречи',
                'verbose_name_plural': 'Шаблоны встреч',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notificationId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField()),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('sendDate', models.DateTimeField(default=django.utils.timezone.now)),
                ('isCompleted', models.BooleanField(default=False)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='taskon.company')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receivedNotifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sentNotifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
            },
        ),
        migrations.CreateModel(
            name='PersonalMeetingRequest',
            fields=[
                ('requestId', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField(blank=True, help_text='Персональное сообщение от организатора', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Ожидает подтверждения'), ('CONFIRMED', 'Подтверждено'), ('CANCELLED', 'Отменено'), ('EXPIRED', 'Истек срок')], default='PENDING', max_length=20)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('expiryDate', models.DateTimeField(blank=True, null=True)),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_meeting_requests', to=settings.AUTH_USER_MODEL)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_meeting_requests', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meeting_requests', to='taskon.meetingtemplate')),
            ],
            options={
                'verbose_name': 'Запрос на личную встречу',
                'verbose_name_plural': 'Запросы на личные встречи',
            },
        ),
        migrations.CreateModel(
            name='PersonalMeeting',
            fields=[
                ('meetingId', models.AutoField(primary_key=True, serialize=False)),
                ('startTime', models.DateTimeField()),
                ('endTime', models.DateTimeField()),
                ('notes', models.TextField(blank=True, help_text='Заметки после встречи', null=True)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Запланирована'), ('COMPLETED', 'Завершена'), ('CANCELLED', 'Отменена')], default='SCHEDULED', max_length=20)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personal_meeting', to='taskon.personalmeetingrequest')),
            ],
            options={
                'verbose_name': 'Личная встреча',
                'verbose_name_plural': 'Личные встречи',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(related_name='users', to='taskon.role'),
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('meetingId', models.AutoField(primary_key=True, serialize=False)),
                ('topic', models.CharField(max_length=255)),
                ('agenda', models.TextField(blank=True, null=True)),
                ('startTime', models.DateTimeField()),
                ('endTime', models.DateTimeField()),
                ('status', models.CharField(choices=[('PLANNED', 'Запланировано'), ('COMPLETED', 'Завершено'), ('CANCELLED', 'Отменено')], default='PLANNED', max_length=20)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_meetings', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='meetings', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meetings', to='taskon.room')),
            ],
            options={
                'verbose_name': 'Встреча',
                'verbose_name_plural': 'Встречи',
            },
        ),
        migrations.CreateModel(
            name='SubDepartment',
            fields=[
                ('subdepartmentId', models.AutoField(primary_key=True, serialize=False)),
                ('subdepartmentName', models.CharField(max_length=255)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subDepartments', to='taskon.department')),
                ('manager', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_subdepartment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Подотдел',
                'verbose_name_plural': 'Подотделы',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='subDepartment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='taskon.subdepartment'),
        ),
        migrations.CreateModel(
            name='AvailabilitySchedule',
            fields=[
                ('scheduleId', models.AutoField(primary_key=True, serialize=False)),
                ('dayOfWeek', models.IntegerField(help_text='День недели (0-6, где 0 - понедельник)')),
                ('startTime', models.TimeField()),
                ('endTime', models.TimeField()),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_schedules', to='taskon.meetingtemplate')),
            ],
            options={
                'verbose_name': 'Расписание доступности',
                'verbose_name_plural': 'Расписания доступности',
                'unique_together': {('template', 'dayOfWeek', 'startTime', 'endTime')},
            },
        ),
    ]
